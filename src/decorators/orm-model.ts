/* eslint-disable @typescript-eslint/no-explicit-any */
import type { Fields } from '@vuex-orm/core';
import type { Module } from 'vuex';

import { Database } from '../database';
import type { Model } from '../model';

import type { FieldFactory } from './attributes';

export type DecoratedModelClass = (typeof Model) & {
  _fields?: Fields[];
  _module?: Module<any, any>;
  _fieldFactories?: Record<string | symbol, FieldFactory>;
};

export type OrmModelOptions = Partial<Pick<typeof Model,
  'types'
  | 'typeKey'
>> & {
  parentEntity?: string;

  /** A default database is always created, but can be overrided here */
  database?: Database;

  /** Autogenerated module can be overrided here */
  module?: Module<any, any>;

  endpoint?: string;

  softDeleteKey?: string;
};

/**
 * Creates an vuex-orm Model
 * @param entityName The name of the entity to be used as the key for the state
 */
export function OrmModel(
  entityName: string,
  options: OrmModelOptions = {},
) {
  return (modelClass: DecoratedModelClass): void => {
    const {
      parentEntity,
      database: optionDatabase,
      module: optionModule,
      endpoint,
      ...modelClassProps
    } = options;

    modelClass.entity = entityName;
    modelClass.endpoint = endpoint ?? entityName;

    Object.assign(modelClass, modelClassProps);

    if (parentEntity) {
      modelClass.baseEntity = parentEntity;
    }

    const database = optionDatabase ?? Database.default;
    const modelModule = optionModule ?? modelClass._module;

    modelClass.fields = () => {
      const fields: Record<string, any> = {};
      for (const key in modelClass._fieldFactories) {
        if (Object.prototype.hasOwnProperty.call(modelClass._fieldFactories, key)) {
          fields[key] = modelClass._fieldFactories[key](database);
        }
      }
      return fields;
    };

    // Register the entity in the database
    database.register(modelClass, modelModule);
  };
}

export default OrmModel;
